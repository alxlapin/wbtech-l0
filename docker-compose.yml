services:
  app-api:
    build:
      context: .
      dockerfile: ./Dockerfile
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - '8080:8080'
    networks:
      - backend

  app-worker:
    build:
      context: .
      dockerfile: ./worker.Dockerfile
    env_file:
      - .env
    depends_on:
      kafka:
        condition: service_started
      postgres:
        condition: service_healthy
    networks:
      - backend

  postgres:
    image: postgres:${POSTGRES_VERSION:-16}-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:?POSTGRES_DB environment variable must be set}
      POSTGRES_USER: ${POSTGRES_USER:?POSTGRES_USER environment variable must be set}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD environment variable must be set}
    healthcheck:
      test: [ "CMD", "pg_isready", "-d", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - pg-data:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    networks:
      - backend

  kafka:
    image: bitnami/kafka:3.1
    environment:
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - kafka-data:/bitnami
    ports:
      - 9092:9092
    networks:
      - kafka-network
      - backend
    depends_on:
      - zookeeper

  zookeeper:
    image: bitnami/zookeeper:3.8
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    volumes:
      - zookeeper-data:/bitnami
    ports:
      - 2181:2181
    networks:
      - kafka-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    environment:
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_NAME: kafka-cluster
      KAFKA_CLUSTERS_0_READONLY: "false"
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - 8088:8080
    networks:
      - kafka-network
      - backend

  migrate:
    image: migrate/migrate
    volumes:
      - ./db/migrations:/migrations:rw
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend

networks:
  backend:
  kafka-network:

volumes:
  pg-data:
  kafka-data:
  zookeeper-data:
